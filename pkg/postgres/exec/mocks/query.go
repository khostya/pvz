// Code generated by MockGen. DO NOT EDIT.
// Source: ./scan.go
//
// Generated by this command:
//
//	mockgen -source ./scan.go -destination=./mocks/query.go -package=mock_query
//

// Package mock_query is a generated GoMock package.
package mock_query

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryEngine is a mock of QueryEngine interface.
type MockQueryEngine struct {
	ctrl     *gomock.Controller
	recorder *MockQueryEngineMockRecorder
	isgomock struct{}
}

// MockQueryEngineMockRecorder is the mock recorder for MockQueryEngine.
type MockQueryEngineMockRecorder struct {
	mock *MockQueryEngine
}

// NewMockQueryEngine creates a new mock instance.
func NewMockQueryEngine(ctrl *gomock.Controller) *MockQueryEngine {
	mock := &MockQueryEngine{ctrl: ctrl}
	mock.recorder = &MockQueryEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryEngine) EXPECT() *MockQueryEngineMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockQueryEngine) Exec(ctx context.Context, sql string, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockQueryEngineMockRecorder) Exec(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQueryEngine)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockQueryEngine) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockQueryEngineMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryEngine)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockQueryEngine) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockQueryEngineMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockQueryEngine)(nil).QueryRow), varargs...)
}
