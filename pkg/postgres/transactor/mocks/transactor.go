// Code generated by MockGen. DO NOT EDIT.
// Source: ./transactor.go
//
// Generated by this command:
//
//	mockgen -source ./transactor.go -destination=./mocks/transactor.go -package=mock_transactor
//

// Package mock_transactor is a generated GoMock package.
package mock_transactor

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	transactor "github.com/khostya/pvz/pkg/postgres/transactor"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactor is a mock of Transactor interface.
type MockTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder
	isgomock struct{}
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder struct {
	mock *MockTransactor
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor(ctrl *gomock.Controller) *MockTransactor {
	mock := &MockTransactor{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor) EXPECT() *MockTransactorMockRecorder {
	return m.recorder
}

// GetQueryEngine mocks base method.
func (m *MockTransactor) GetQueryEngine(ctx context.Context) transactor.QueryEngine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryEngine", ctx)
	ret0, _ := ret[0].(transactor.QueryEngine)
	return ret0
}

// GetQueryEngine indicates an expected call of GetQueryEngine.
func (mr *MockTransactorMockRecorder) GetQueryEngine(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryEngine", reflect.TypeOf((*MockTransactor)(nil).GetQueryEngine), ctx)
}

// RunReadCommited mocks base method.
func (m *MockTransactor) RunReadCommited(ctx context.Context, fx func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunReadCommited", ctx, fx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunReadCommited indicates an expected call of RunReadCommited.
func (mr *MockTransactorMockRecorder) RunReadCommited(ctx, fx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReadCommited", reflect.TypeOf((*MockTransactor)(nil).RunReadCommited), ctx, fx)
}

// RunRepeatableRead mocks base method.
func (m *MockTransactor) RunRepeatableRead(ctx context.Context, fx func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunRepeatableRead", ctx, fx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRepeatableRead indicates an expected call of RunRepeatableRead.
func (mr *MockTransactorMockRecorder) RunRepeatableRead(ctx, fx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRepeatableRead", reflect.TypeOf((*MockTransactor)(nil).RunRepeatableRead), ctx, fx)
}

// Unwrap mocks base method.
func (m *MockTransactor) Unwrap(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockTransactorMockRecorder) Unwrap(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockTransactor)(nil).Unwrap), err)
}

// MockQueryEngine is a mock of QueryEngine interface.
type MockQueryEngine struct {
	ctrl     *gomock.Controller
	recorder *MockQueryEngineMockRecorder
	isgomock struct{}
}

// MockQueryEngineMockRecorder is the mock recorder for MockQueryEngine.
type MockQueryEngineMockRecorder struct {
	mock *MockQueryEngine
}

// NewMockQueryEngine creates a new mock instance.
func NewMockQueryEngine(ctrl *gomock.Controller) *MockQueryEngine {
	mock := &MockQueryEngine{ctrl: ctrl}
	mock.recorder = &MockQueryEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryEngine) EXPECT() *MockQueryEngineMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockQueryEngine) Exec(ctx context.Context, sql string, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockQueryEngineMockRecorder) Exec(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQueryEngine)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockQueryEngine) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockQueryEngineMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryEngine)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockQueryEngine) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockQueryEngineMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockQueryEngine)(nil).QueryRow), varargs...)
}

// MockQueryEngineProvider is a mock of QueryEngineProvider interface.
type MockQueryEngineProvider struct {
	ctrl     *gomock.Controller
	recorder *MockQueryEngineProviderMockRecorder
	isgomock struct{}
}

// MockQueryEngineProviderMockRecorder is the mock recorder for MockQueryEngineProvider.
type MockQueryEngineProviderMockRecorder struct {
	mock *MockQueryEngineProvider
}

// NewMockQueryEngineProvider creates a new mock instance.
func NewMockQueryEngineProvider(ctrl *gomock.Controller) *MockQueryEngineProvider {
	mock := &MockQueryEngineProvider{ctrl: ctrl}
	mock.recorder = &MockQueryEngineProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryEngineProvider) EXPECT() *MockQueryEngineProviderMockRecorder {
	return m.recorder
}

// GetQueryEngine mocks base method.
func (m *MockQueryEngineProvider) GetQueryEngine(ctx context.Context) transactor.QueryEngine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryEngine", ctx)
	ret0, _ := ret[0].(transactor.QueryEngine)
	return ret0
}

// GetQueryEngine indicates an expected call of GetQueryEngine.
func (mr *MockQueryEngineProviderMockRecorder) GetQueryEngine(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryEngine", reflect.TypeOf((*MockQueryEngineProvider)(nil).GetQueryEngine), ctx)
}
