// Code generated by MockGen. DO NOT EDIT.
// Source: ./mocks/bcrypt.go
//
// Generated by this command:
//
//	mockgen -source ./mocks/bcrypt.go -destination=./mocks/bcrypt.go -package=mock_hash
//

// Package mock_hash is a generated GoMock package.
package mock_hash

import (
	reflect "reflect"

	hash "github.com/khostya/pvz/pkg/hash"
	gomock "go.uber.org/mock/gomock"
)

// Mockbcrypt is a mock of bcrypt interface.
type Mockbcrypt struct {
	ctrl     *gomock.Controller
	recorder *MockbcryptMockRecorder
	isgomock struct{}
}

// MockbcryptMockRecorder is the mock recorder for Mockbcrypt.
type MockbcryptMockRecorder struct {
	mock *Mockbcrypt
}

// NewMockbcrypt creates a new mock instance.
func NewMockbcrypt(ctrl *gomock.Controller) *Mockbcrypt {
	mock := &Mockbcrypt{ctrl: ctrl}
	mock.recorder = &MockbcryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbcrypt) EXPECT() *MockbcryptMockRecorder {
	return m.recorder
}

// Equal mocks base method.
func (m *Mockbcrypt) Equal(e hash.EqualsParam) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", e)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockbcryptMockRecorder) Equal(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*Mockbcrypt)(nil).Equal), e)
}

// Hash mocks base method.
func (m *Mockbcrypt) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockbcryptMockRecorder) Hash(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*Mockbcrypt)(nil).Hash), password)
}
