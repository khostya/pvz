//go:generate ${LOCAL_BIN}/ifacemaker -f ./manager.go -s Manager -i manager -p mock_jwt -c "Code generated by ifacemaker. DO NOT EDIT." -o ./mocks/jwt.go
//go:generate ${LOCAL_BIN}/mockgen -source ./mocks/jwt.go -destination=./mocks/jwt.go -package=mock_jwt

package jwt

import (
	"context"
	"errors"
	"fmt"
	"github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"
	"github.com/khostya/pvz/internal/domain"
	"github.com/khostya/pvz/pkg/appctx"
	"time"
)

const (
	roleKey    = "role"
	isDummyKey = "is_dummy"
)

type (
	ManagerDeps struct {
		SigningKey string
		AccessTTL  time.Duration
	}

	Manager struct {
		signingKey string
		accessTTL  time.Duration
	}
)

func NewTokenManager(deps ManagerDeps) *Manager {
	return &Manager{
		signingKey: deps.SigningKey,
		accessTTL:  deps.AccessTTL,
	}
}

func (m *Manager) GenerateToken(user *domain.User) (domain.Token, error) {
	now := time.Now()
	jwtToken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"sub":      user.ID.String(),
		"iat":      now.Unix(),
		roleKey:    string(user.Role),
		isDummyKey: false,
		"exp":      now.Add(m.accessTTL).Unix(),
	})

	return m.sign(jwtToken)
}

func (m *Manager) GenerateDummyToken(role domain.Role) (domain.Token, error) {
	now := time.Now()
	jwtToken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		roleKey:    string(role),
		"iat":      now.Unix(),
		isDummyKey: true,
		"exp":      now.Add(m.accessTTL).Unix(),
	})

	return m.sign(jwtToken)
}

func (m *Manager) sign(jwtToken *jwt.Token) (domain.Token, error) {
	token, err := jwtToken.SignedString([]byte(m.signingKey))
	if err != nil {
		return "", err
	}

	return domain.Token(token), nil
}

func (m *Manager) ParseToken(ctx context.Context, token string) (context.Context, error) {
	claims, err := m.parse(token)
	if err != nil {
		return nil, err
	}

	issuer, err := claims.GetSubject()
	if err != nil {
		return nil, err
	}

	id, err := uuid.Parse(issuer)
	if err != nil && issuer != "" {
		return nil, errors.New("issuer is not uuid")
	}

	if err == nil {
		ctx = appctx.SetUserID(ctx, id)
	}

	isDummy, ok := claims[isDummyKey]
	if !ok {
		return nil, errors.New("is_dummy key not found")
	}

	if _, isBool := isDummy.(bool); !isBool {
		return nil, errors.New("is_dummy key is not bool")
	}
	ctx = appctx.SetIsDummy(ctx, isDummy.(bool))

	if _, ok := claims[roleKey]; !ok {
		return nil, errors.New("role key not found")
	}
	ctx = appctx.SetRole(ctx, domain.Role(claims[roleKey].(string)))

	return ctx, nil
}

func (m *Manager) parse(accessToken string) (jwt.MapClaims, error) {
	token, err := jwt.Parse(accessToken, func(token *jwt.Token) (i interface{}, err error) {
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
		}

		return []byte(m.signingKey), nil
	})
	if err != nil {
		return nil, err
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		return nil, fmt.Errorf("error get user claims from token")
	}

	return claims, nil
}

func (m *Manager) GetUserIDFromCtx(ctx context.Context) (uuid.UUID, bool) {
	return appctx.GetUserID(ctx)
}

func (m *Manager) GetIsDummyFromCtx(ctx context.Context) (bool, bool) {
	return appctx.GetIsDummy(ctx)
}

func (m *Manager) GetRoleFromCtx(ctx context.Context) (domain.Role, bool) {
	return appctx.GetRole(ctx)
}
