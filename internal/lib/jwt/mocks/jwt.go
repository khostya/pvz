// Code generated by MockGen. DO NOT EDIT.
// Source: ./mocks/jwt.go
//
// Generated by this command:
//
//	mockgen -source ./mocks/jwt.go -destination=./mocks/jwt.go -package=mock_jwt
//

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/khostya/pvz/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// Mockmanager is a mock of manager interface.
type Mockmanager struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerMockRecorder
	isgomock struct{}
}

// MockmanagerMockRecorder is the mock recorder for Mockmanager.
type MockmanagerMockRecorder struct {
	mock *Mockmanager
}

// NewMockmanager creates a new mock instance.
func NewMockmanager(ctrl *gomock.Controller) *Mockmanager {
	mock := &Mockmanager{ctrl: ctrl}
	mock.recorder = &MockmanagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmanager) EXPECT() *MockmanagerMockRecorder {
	return m.recorder
}

// GenerateDummyToken mocks base method.
func (m *Mockmanager) GenerateDummyToken(role domain.Role) (domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDummyToken", role)
	ret0, _ := ret[0].(domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDummyToken indicates an expected call of GenerateDummyToken.
func (mr *MockmanagerMockRecorder) GenerateDummyToken(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDummyToken", reflect.TypeOf((*Mockmanager)(nil).GenerateDummyToken), role)
}

// GenerateToken mocks base method.
func (m *Mockmanager) GenerateToken(user *domain.User) (domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user)
	ret0, _ := ret[0].(domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockmanagerMockRecorder) GenerateToken(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*Mockmanager)(nil).GenerateToken), user)
}

// GetIsDummyFromCtx mocks base method.
func (m *Mockmanager) GetIsDummyFromCtx(ctx context.Context) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsDummyFromCtx", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIsDummyFromCtx indicates an expected call of GetIsDummyFromCtx.
func (mr *MockmanagerMockRecorder) GetIsDummyFromCtx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsDummyFromCtx", reflect.TypeOf((*Mockmanager)(nil).GetIsDummyFromCtx), ctx)
}

// GetRoleFromCtx mocks base method.
func (m *Mockmanager) GetRoleFromCtx(ctx context.Context) (domain.Role, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleFromCtx", ctx)
	ret0, _ := ret[0].(domain.Role)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRoleFromCtx indicates an expected call of GetRoleFromCtx.
func (mr *MockmanagerMockRecorder) GetRoleFromCtx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleFromCtx", reflect.TypeOf((*Mockmanager)(nil).GetRoleFromCtx), ctx)
}

// GetUserIDFromCtx mocks base method.
func (m *Mockmanager) GetUserIDFromCtx(ctx context.Context) (uuid.UUID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromCtx", ctx)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUserIDFromCtx indicates an expected call of GetUserIDFromCtx.
func (mr *MockmanagerMockRecorder) GetUserIDFromCtx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromCtx", reflect.TypeOf((*Mockmanager)(nil).GetUserIDFromCtx), ctx)
}

// ParseHeader mocks base method.
func (m *Mockmanager) ParseHeader(ctx context.Context, header string) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseHeader", ctx, header)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseHeader indicates an expected call of ParseHeader.
func (mr *MockmanagerMockRecorder) ParseHeader(ctx, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseHeader", reflect.TypeOf((*Mockmanager)(nil).ParseHeader), ctx, header)
}

// ParseToken mocks base method.
func (m *Mockmanager) ParseToken(ctx context.Context, token string) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, token)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockmanagerMockRecorder) ParseToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*Mockmanager)(nil).ParseToken), ctx, token)
}
