// Code generated by MockGen. DO NOT EDIT.
// Source: ./mocks/reception.go
//
// Generated by this command:
//
//	mockgen -source ./mocks/reception.go -destination=./mocks/reception.go -package=mock_postgres
//

// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/khostya/pvz/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockReceptionRepo is a mock of ReceptionRepo interface.
type MockReceptionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionRepoMockRecorder
	isgomock struct{}
}

// MockReceptionRepoMockRecorder is the mock recorder for MockReceptionRepo.
type MockReceptionRepoMockRecorder struct {
	mock *MockReceptionRepo
}

// NewMockReceptionRepo creates a new mock instance.
func NewMockReceptionRepo(ctrl *gomock.Controller) *MockReceptionRepo {
	mock := &MockReceptionRepo{ctrl: ctrl}
	mock.recorder = &MockReceptionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionRepo) EXPECT() *MockReceptionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReceptionRepo) Create(ctx context.Context, reception *domain.Reception) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, reception)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReceptionRepoMockRecorder) Create(ctx, reception any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReceptionRepo)(nil).Create), ctx, reception)
}

// GetByID mocks base method.
func (m *MockReceptionRepo) GetByID(ctx context.Context, id uuid.UUID) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockReceptionRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockReceptionRepo)(nil).GetByID), ctx, id)
}

// GetFirstByStatusAndPVZId mocks base method.
func (m *MockReceptionRepo) GetFirstByStatusAndPVZId(ctx context.Context, status domain.ReceptionStatus, pvzID uuid.UUID) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstByStatusAndPVZId", ctx, status, pvzID)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstByStatusAndPVZId indicates an expected call of GetFirstByStatusAndPVZId.
func (mr *MockReceptionRepoMockRecorder) GetFirstByStatusAndPVZId(ctx, status, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstByStatusAndPVZId", reflect.TypeOf((*MockReceptionRepo)(nil).GetFirstByStatusAndPVZId), ctx, status, pvzID)
}

// UpdateReceptionStatusByID mocks base method.
func (m *MockReceptionRepo) UpdateReceptionStatusByID(ctx context.Context, id uuid.UUID, status domain.ReceptionStatus) (*domain.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReceptionStatusByID", ctx, id, status)
	ret0, _ := ret[0].(*domain.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReceptionStatusByID indicates an expected call of UpdateReceptionStatusByID.
func (mr *MockReceptionRepoMockRecorder) UpdateReceptionStatusByID(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReceptionStatusByID", reflect.TypeOf((*MockReceptionRepo)(nil).UpdateReceptionStatusByID), ctx, id, status)
}
