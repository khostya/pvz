services:
  pvz:
    build:
      context: ../
      dockerfile: ./build/Dockerfile
    container_name: pvz
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SIGNING_KEY: ${JWT_SIGNING_KEY}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./../config:/config
    networks:
      - service
      - postgres

  postgres:
    image: postgres:17
    container_name: postgres
    hostname: ${DATABASE_HOST}
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - ./../data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d pvz'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - postgres

  migrations:
    build:
      context: ../
      dockerfile: ./build/migrations.Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL}
    volumes:
      - ./../migrations:/migrations
    depends_on:
      postgres:
        condition: service_healthy
    command: [ "goose", "-dir", "/migrations", "postgres", "${DATABASE_URL}", "up" ]
    restart: "on-failure"
    networks:
      - postgres

networks:
  postgres:
  service: